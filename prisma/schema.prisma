// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string

// Common commands: 
// npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// by default generated by shopify (after auth)
// this is offline access, which does not expire until the user removes the application
// Before deployment, refactor so that all the database items are connected to the session instead of having its own shop field
model Session {
  id                           String                 @id
  shop                         String
  state                        String
  isOnline                     Boolean                @default(false)
  scope                        String?
  expires                      DateTime?              @db.Timestamp
  accessToken                  String
  userId                       BigInt?
  firstName                    String?
  lastName                     String?
  email                        String?
  accountOwner                 Boolean                @default(false)
  locale                       String?
  collaborator                 Boolean?               @default(false)
  emailVerified                Boolean?               @default(false)
  userPreference               UserPreference?
  fulfillmentService           FulfillmentService?
  supplierAccessRequest        SupplierAccessRequest?
  userProfile                  UserProfile?
  roles                        Role[]
  checklistStatuses            ChecklistStatus[]
  priceLists                   PriceList[]
  importedProducts             ImportedProduct[]
  retailerPartnerships         Partnership[]          @relation("RetailerPartnership")
  supplierPartnerships         Partnership[]          @relation("SupplierPartnership")
  senderPartnershipRequests    PartnershipRequest[]   @relation("SenderPartnershipRequest")
  recipientPartnershipRequests PartnershipRequest[]   @relation("RecipientPartnershipRequest")
}

model FulfillmentService {
  id                          String  @id @default(uuid())
  shopifyFulfillmentServiceId String
  shopifyLocationId           String
  Session                     Session @relation(fields: [sessionId], references: [id])
  sessionId                   String  @unique
}

model UserPreference {
  id             String   @id @default(uuid())
  session        Session  @relation(fields: [sessionId], references: [id])
  tableIdsHidden String[]
  sessionId      String   @unique
}

model ChecklistTable {
  id             String          @id @default(uuid())
  position       Int
  header         String
  subheader      String?
  checklistItems ChecklistItem[]
}

model ChecklistItem {
  id                String            @id @default(uuid())
  key               String            @unique
  checklistTable    ChecklistTable    @relation(fields: [checklistTableId], references: [id])
  checklistTableId  String
  position          Int
  header            String
  subheader         String?
  buttonText        String?
  checklistStatuses ChecklistStatus[]
}

model ChecklistStatus {
  id                    String                 @id @default(uuid())
  session               Session                @relation(fields: [sessionId], references: [id])
  sessionId             String
  checklistItem         ChecklistItem          @relation(fields: [checklistItemId], references: [id])
  checklistItemId       String
  isCompleted           Boolean
  supplierAccessRequest SupplierAccessRequest?
}

model SupplierAccessRequest {
  id                      String          @id @default(uuid())
  num                     Int             @default(autoincrement())
  checklistStatusId       String          @unique
  hasMetSalesThreshold    Boolean
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @default(now())
  status                  String
  sessionId               String          @unique
  notes                   String?
  isEligibleForNewRequest Boolean         @default(true) // This variable is just in case we reject a supplier and they are not allowed to relist on our app
  checklistStatus         ChecklistStatus @relation(fields: [checklistStatusId], references: [id])
  session                 Session         @relation(fields: [sessionId], references: [id])
}

model Role {
  id                 String   @id @default(uuid())
  name               String
  session            Session  @relation(fields: [sessionId], references: [id])
  sessionId          String
  createdAt          DateTime @default(now())
  isVisibleInNetwork Boolean  @default(true)
}

model UserProfile {
  id              String           @id @default(uuid())
  name            String
  website         String
  address         String?
  email           String
  logo            String?
  biography       String?
  desiredProducts String?
  currencyCode    String           @default("USD")
  sessionId       String           @unique
  session         Session          @relation(fields: [sessionId], references: [id])
  socialMediaLink SocialMediaLink?
}

model SocialMediaLink {
  id            String      @id @default(uuid())
  facebook      String?
  twitter       String?
  instagram     String?
  youtube       String?
  tiktok        String?
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String      @unique
}

// Supplier and Retailer Functionality
// Price list and product
model PriceList {
  id                       String               @id @default(uuid())
  createdAt                DateTime             @default(now())
  name                     String
  isGeneral                Boolean // There can only be one general price list, this is what products are visible on the products page
  requiresApprovalToImport Boolean? // if the price list is a general price list, suppliers can decide whether or not retailers have to request permission to import their products
  pricingStrategy          String
  supplierId               String
  margin                   Int?
  session                  Session              @relation(fields: [supplierId], references: [id])
  products                 Product[]
  partnershipRequests      PartnershipRequest[]
  partnerships             Partnership[]
}

model PartnershipRequest {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  senderId    String
  recipientId String
  message     String
  type        String // two types, retailer request and supplier request
  status      String // can only be rejected or pending; if it is accepted already, it will just make the user into a price list retailer
  priceLists  PriceList[]
  sender      Session     @relation("SenderPartnershipRequest", fields: [senderId], references: [id])
  recipient   Session     @relation("RecipientPartnershipRequest", fields: [recipientId], references: [id])
}

model Partnership {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  retailerId String
  supplierId String
  message    String
  priceLists PriceList[]
  retailer   Session     @relation("RetailerPartnership", fields: [retailerId], references: [id])
  supplier   Session     @relation("SupplierPartnership", fields: [supplierId], references: [id])
}

// Necessary fields for products, the rest can be imported by gql
model Product {
  id               String            @id @default(uuid())
  shopifyProductId String
  priceListId      String
  createdAt        DateTime          @default(now())
  priceList        PriceList         @relation(fields: [priceListId], references: [id])
  variants         Variant[]
  importedProducts ImportedProduct[]
}

model Variant {
  id               String            @id @default(uuid())
  shopifyVariantId String
  productId        String
  retailPrice      String
  retailerPayment  String
  supplierProfit   String
  product          Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryItem    InventoryItem?
  importedVariants ImportedVariant[]
}

model InventoryItem {
  id                     String  @id @default(uuid())
  shopifyInventoryItemId String
  variantId              String  @unique
  variant                Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

// End models for variants

// Models for imported products
// TODO: focus on importing these
model ImportedProduct {
  id                          String                       @id @default(uuid())
  prismaProductId             String
  shopifyProductId            String
  retailerId                  String
  importedAt                  DateTime                     @default(now())
  prismaProduct               Product                      @relation(fields: [prismaProductId], references: [id])
  session                     Session                      @relation(fields: [retailerId], references: [id])
  importedVariants            ImportedVariant[]
  importedProductTransactions ImportedProductTransaction[]
}

model ImportedVariant {
  id                String          @id @default(uuid())
  importedProductId String
  prismaVariantId   String
  primaVariant      Variant         @relation(fields: [prismaVariantId], references: [id])
  importedProduct   ImportedProduct @relation(fields: [importedProductId], references: [id])
}

model ImportedProductTransaction {
  id                String          @id @default(uuid())
  importedProductId String
  createdAt         DateTime
  fulfilledAt       DateTime
  unitSales         Int
  importedProduct   ImportedProduct @relation(fields: [importedProductId], references: [id])
}
