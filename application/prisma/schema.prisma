generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id                           String                 @id
  shop                         String
  state                        String
  isOnline                     Boolean                @default(false)
  scope                        String?
  expires                      DateTime?              @db.Timestamp(6)
  accessToken                  String
  userId                       BigInt?
  firstName                    String?
  lastName                     String?
  email                        String?
  accountOwner                 Boolean                @default(false)
  locale                       String?
  collaborator                 Boolean?               @default(false)
  emailVerified                Boolean?               @default(false)
  storefrontAccessToken        String?
  isAppUninstalled             Boolean                @default(false)
  carrierService               CarrierService?
  checklistStatuses            ChecklistStatus[]
  fulfillmentService           FulfillmentService?
  importedProducts             ImportedProduct[]
  retailerPartnerships         Partnership[]          @relation("RetailerPartnership")
  supplierPartnerships         Partnership[]          @relation("SupplierPartnership")
  recipientPartnershipRequests PartnershipRequest[]   @relation("RecipientPartnershipRequest")
  senderPartnershipRequests    PartnershipRequest[]   @relation("SenderPartnershipRequest")
  priceLists                   PriceList[]
  roles                        Role[]
  supplierAccessRequest        SupplierAccessRequest?
  userPreference               UserPreference?
  userProfile                  UserProfile?
  retailerOrders               Order[]                @relation("RetailerOrder")
  supplierOrders               Order[]                @relation("SupplierOrder")
  stripeConnectAccount         StripeConnectAccount?
  stripeCustomerAccount        StripeCustomerAccount?
}

model FulfillmentService {
  id                          String  @id @default(uuid())
  sessionId                   String  @unique
  shopifyFulfillmentServiceId String
  shopifyLocationId           String
  session                     Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id             String   @id @default(uuid())
  tableIdsHidden String[]
  sessionId      String   @unique
  session        Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model ChecklistTable {
  id             String          @id @default(uuid())
  position       Int
  header         String
  subheader      String?
  checklistItems ChecklistItem[]
}

model ChecklistItem {
  id                String            @id @default(uuid())
  key               String            @unique
  checklistTableId  String
  position          Int
  header            String
  subheader         String?
  buttonText        String?
  checklistTable    ChecklistTable    @relation(fields: [checklistTableId], references: [id])
  checklistStatuses ChecklistStatus[]
}

model ChecklistStatus {
  id                    String                 @id @default(uuid())
  checklistItemId       String
  isCompleted           Boolean
  sessionId             String
  checklistItem         ChecklistItem          @relation(fields: [checklistItemId], references: [id])
  session               Session                @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  supplierAccessRequest SupplierAccessRequest?
}

model SupplierAccessRequest {
  checklistStatusId       String          @unique
  hasMetSalesThreshold    Boolean
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  status                  String
  sessionId               String          @unique
  notes                   String?
  isEligibleForNewRequest Boolean         @default(true)
  id                      String          @id @default(uuid())
  num                     Int             @default(autoincrement())
  checklistStatus         ChecklistStatus @relation(fields: [checklistStatusId], references: [id])
  session                 Session         @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Role {
  id                 String   @id @default(uuid())
  name               String
  sessionId          String
  createdAt          DateTime @default(now())
  isVisibleInNetwork Boolean  @default(true)
  session            Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id              String           @id @default(uuid())
  name            String
  email           String
  logo            String?
  biography       String?
  desiredProducts String?
  sessionId       String           @unique
  address         String?
  website         String
  currencyCode    String
  socialMediaLink SocialMediaLink?
  session         Session          @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model SocialMediaLink {
  id            String      @id @default(uuid())
  facebook      String?
  twitter       String?
  instagram     String?
  youtube       String?
  tiktok        String?
  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model PriceList {
  id                       String               @id @default(uuid())
  createdAt                DateTime             @default(now())
  pricingStrategy          String
  supplierId               String
  isGeneral                Boolean
  name                     String
  requiresApprovalToImport Boolean?
  margin                   Int?
  session                  Session              @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  products                 Product[]
  partnershipRequests      PartnershipRequest[] @relation("PartnershipRequestToPriceList")
  partnerships             Partnership[]        @relation("PartnershipToPriceList")
  orderLineItems           OrderLineItem[]
}

model PartnershipRequest {
  id          String      @id @default(uuid())
  senderId    String
  recipientId String
  message     String
  status      String
  type        String
  createdAt   DateTime    @default(now())
  recipient   Session     @relation("RecipientPartnershipRequest", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      Session     @relation("SenderPartnershipRequest", fields: [senderId], references: [id], onDelete: Cascade)
  priceLists  PriceList[] @relation("PartnershipRequestToPriceList")
}

model Partnership {
  id         String      @id @default(uuid())
  retailerId String
  supplierId String
  createdAt  DateTime    @default(now())
  message    String
  retailer   Session     @relation("RetailerPartnership", fields: [retailerId], references: [id], onDelete: Cascade)
  supplier   Session     @relation("SupplierPartnership", fields: [supplierId], references: [id], onDelete: Cascade)
  priceLists PriceList[] @relation("PartnershipToPriceList")
}

model Product {
  id               String            @id @default(uuid())
  priceListId      String
  shopifyProductId String
  createdAt        DateTime          @default(now())
  importedProducts ImportedProduct[]
  priceList        PriceList         @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  variants         Variant[]
}

model Variant {
  id               String            @id @default(uuid())
  productId        String
  shopifyVariantId String
  retailPrice      String
  retailerPayment  String
  supplierProfit   String
  importedVariants ImportedVariant[]
  inventoryItem    InventoryItem?
  product          Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model InventoryItem {
  id                     String                  @id @default(uuid())
  variantId              String                  @unique
  shopifyInventoryItemId String
  ImportedInventoryItem  ImportedInventoryItem[]
  variant                Variant                 @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model ImportedProduct {
  id               String            @id @default(uuid())
  retailerId       String
  importedAt       DateTime          @default(now())
  prismaProductId  String
  shopifyProductId String
  prismaProduct    Product           @relation(fields: [prismaProductId], references: [id], onDelete: Cascade)
  session          Session           @relation(fields: [retailerId], references: [id], onDelete: Cascade)
  importedVariants ImportedVariant[]
}

model ImportedVariant {
  id                    String                 @id @default(uuid())
  importedProductId     String
  prismaVariantId       String
  shopifyVariantId      String
  importedInventoryItem ImportedInventoryItem?
  importedProduct       ImportedProduct        @relation(fields: [importedProductId], references: [id], onDelete: Cascade)
  primaVariant          Variant                @relation(fields: [prismaVariantId], references: [id], onDelete: Cascade)
}

model ImportedInventoryItem {
  id                     String          @id @default(uuid())
  shopifyInventoryItemId String
  importedVariantId      String          @unique
  prismaInventoryItemId  String
  importedVariant        ImportedVariant @relation(fields: [importedVariantId], references: [id], onDelete: Cascade)
  prismaInventoryItem    InventoryItem   @relation(fields: [prismaInventoryItemId], references: [id], onDelete: Cascade)
}

model CarrierService {
  id                      String  @id @default(uuid())
  retailerId              String  @unique
  shopifyCarrierServiceId String
  retailer                Session @relation(fields: [retailerId], references: [id], onDelete: Cascade)
}

model Order {
  id                                String          @id @default(uuid())
  currency                          String
  shopifyRetailerFulfillmentOrderId String
  shopifySupplierOrderId            String
  retailerId                        String?
  supplierId                        String?
  shippingCost                      Decimal         @default(0) @db.Decimal(10, 2)
  paymentStatus                     String
  createdAt                         DateTime        @default(now())
  updatedAt                         DateTime        @updatedAt
  retailer                          Session?        @relation("RetailerOrder", fields: [retailerId], references: [id], onDelete: SetNull)
  supplier                          Session?        @relation("SupplierOrder", fields: [supplierId], references: [id], onDelete: SetNull)
  payments                          Payment[]
  orderLineItems                    OrderLineItem[]
  fulfillments                      Fulfillment[]
}

model OrderLineItem {
  id                             String     @id @default(uuid())
  retailerShopifyVariantId       String
  supplierShopifyVariantId       String
  retailPricePerUnit             Decimal    @db.Decimal(10, 2)
  amountPayablePerUnit           Decimal    @db.Decimal(10, 2) // retrieve the supplier agreed upon profit
  shopifyRetailerOrderLineItemId String
  shopifySupplierOrderLineItemId String
  quantity                       Int
  quantityFulfilled              Int        @default(0)
  quantityPaid                   Int        @default(0)
  quantityCancelled              Int        @default(0)
  orderId                        String
  priceListId                    String?
  order                          Order      @relation(fields: [orderId], references: [id])
  priceList                      PriceList? @relation(fields: [priceListId], references: [id], onDelete: SetNull)
}

model Fulfillment {
  id                           String   @id @default(uuid())
  supplierShopifyFulfillmentId String
  retailerShopifyFulfillmentId String
  orderId                      String
  order                        Order    @relation(fields: [orderId], references: [id])
  payment                      Payment?
}

model Payment {
  id            String      @id @default(uuid())
  orderId       String
  stripeEventId String      @unique
  status        String // need to listen to stripe's webhooks for this
  orderPaid     Decimal     @db.Decimal(10, 2)
  shippingPaid  Decimal     @db.Decimal(10, 2)
  totalPaid     Decimal     @db.Decimal(10, 2)
  createdAt     DateTime    @default(now())
  fulfillmentId String      @unique
  order         Order       @relation(fields: [orderId], references: [id])
  fulfillment   Fulfillment @relation(fields: [fulfillmentId], references: [id])
}

model StripeConnectAccount {
  id              String   @id @default(uuid())
  stripeAccountId String   @unique
  supplierId      String   @unique
  session         Session  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model StripeCustomerAccount {
  id               String   @id @default(uuid())
  stripeCustomerId String   @unique
  retailerId       String   @unique
  hasPaymentMethod Boolean  @default(false)
  session          Session  @relation(fields: [retailerId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
