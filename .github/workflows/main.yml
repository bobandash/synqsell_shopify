name: CI/CD pipeline for application
on:
  push:
    branches:
      - dev
      - staging
      - prod
  pull_request:
    branches:
      - dev
      - staging
      - prod

jobs:
  ci_application:
    name: CI - Application
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "./application/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Install Shopify cli
        run: npm install -g @shopify/cli@latest
      - name: Build application
        run: npm run build
      - name: Create executable for wait-for-it
        run: chmod +x wait-for-it.sh
      - name: Run tests
        run: npm run test

  ci_aws:
    name: CI - AWS Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./aws
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Install sam cli
        uses: aws-actions/setup-sam@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Validate Nested Stacks
        run: |
          sam validate --template-file infrastructure/template.yaml --lint
          sam validate --template-file infrastructure/stacks/api.yaml --lint
          sam validate --template-file infrastructure/stacks/application.yaml --lint
          sam validate --template-file infrastructure/stacks/database.yaml --lint
          sam validate --template-file infrastructure/stacks/lambda.yaml --lint
          sam validate --template-file infrastructure/stacks/networking.yaml --lint
          sam validate --template-file infrastructure/stacks/policy.yaml --lint
          sam validate --template-file infrastructure/stacks/security.yaml --lint
      - name: Build Infrastructure
        run: sam build --use-container

  cd_application_config:
    name: CD - App Config
    needs: [ci_application, ci_aws]
    if: github.event_name == 'push'
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "./application/package-lock.json"
      - name: Install npm dependencies
        run: npm ci
      - name: Install Shopify CLI
        run: npm install -g @shopify/cli@latest
      - name: Deploy configuration
        env:
          # Token from the Partner Dashboard
          SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}
          COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
        run: |
          npm run config:use ${{ github.ref_name  }}
          shopify app deploy -f --source-control-url "$COMMIT_URL"

  deploy_aws_dev:
    name: CD - Infrastructure (Dev)
    needs: [cd_application_config]
    if: github.event_name == 'push' && github.ref_name == 'dev'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./aws
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Login AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Install Sam Cli
        uses: aws-actions/setup-sam@v2
      - name: Build Infrastructure
        run: sam build --use-container
      - name: Deploy Dev Infrastructure (Delivery)
        run: sam deploy --config-env dev --no-execute-changeset

  # NOTE: For prod and staging environments, I am not able to build until after deploying the infra manually once bc application's image is stored in ECR
  deploy_application:
    name: CD - Application (Prod/Staging)
    needs: [cd_application_config]
    if: github.event_name == 'push' && (github.ref_name == 'prod' || github.ref_name == 'staging')
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "./application/package-lock.json"
      - name: Login AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Verify Initial Stack Was Created
        run: test $(aws ecr describe-repositories --query "length(repositories[?repositoryUri=='${{ secrets.ECR_URL }}'])") -eq 1
      - name: Build and Push Docker Image to ECR
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: synqsell-app
          registry: ${{ secrets.ECR_URL }}
          tags: ${{github.sha}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # https://github.com/aws/aws-sam-cli/issues/2380
  # ^ they are working on this issue but when you pass parameter overrides on cli, it replaces the toml file config instead of overriding the parameter you set
  deploy_aws_live:
    name: CD - Infrastructure (Prod/Staging)
    needs: [deploy_application]
    if: github.event_name == 'push' && (github.ref_name == 'prod' || github.ref_name == 'staging')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./aws
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Login AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
      - name: Build Infrastructure
        run: sam build
      - name: Deploy Infrastructure
        run:
          sam deploy --config-env ${{github.ref_name}} --no-execute-changeset --override-parameters \
          --Environment=${{github.ref_name}} \
          --ApiKeySecret=${{github.ref_name}}/apiKeys \
          --AppConfigSecret=${{github.ref_name}}/appConfig \
          --AppHostedZoneId=${{vars.HOSTED_ZONE_ID}} \
          --AppDomainName=app.${{github.ref_name}}.synqsell.com \
          --AppImageTag=${{ github.sha }}
          --IsInitialDeploy="False"
