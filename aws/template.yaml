AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions
Description: >
  SAM Template For all infrastructure for SynqSell

# TODO: Refactor: change the hardcoded values like stage name, or api gateway routes
# TODO: add lambda layers for shared functions
# TODO: After confirm prod traction, add db password rotation

# INITIAL SET UP: NEED TO PROVIDE A KEY-PAIR TO ACCESS BASTION HOST, can only be created manually because pem is only accessible in the beginning
Parameters:
  ShopifySourceName:
    Type: String
    Description: The source name for Shopify Events
    Default: "shopify"

  RDSDatabaseName:
    Type: String
    Description: The name of the database
    Default: "postgres"

  RDSDatabaseUsername:
    Type: String
    Description: The username of the master user
    Default: "postgres"

  # Parameter values that have to be overridden depending on the AWS account and user IP
  BastionHostKeyName:
    Type: String
    Description: Key name for SSH into bastion host for database access
    Default: synqsell-key-pair

  EventBusArn:
    Type: String
    Description: "The ARN of the Shopify Event Bus"
    Default: arn:aws:events:us-east-2:149536473043:event-bus/aws.partner/shopify.com/153436192769/aws

  StripeSecretsManagerARN:
    Type: String
    Description: "The ARN of Stripe Secrets"
    Default: arn:aws:secretsmanager:us-east-2:149536473043:secret:stripeTestKeys-iNuIql

  MyCidrIP:
    Type: String
    Description: IP for rds access
    Default: 123.123.123.123/32

Globals:
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Shopify-Shop-Domain,X-Shopify-Hmac-SHA256'"
      AllowOrigin: "'https://*.myshopify.com'"
      MaxAge: "'300'"
  Function:
    Timeout: 3
    Environment:
      Variables:
        DB_USER: !Ref RDSDatabaseUsername
        DB_PASSWORD: !Sub "{{resolve:secretsmanager:${DatabaseRotationSecret}:SecretString:password}}"
        DB_HOST: !GetAtt DatabaseRDS.Endpoint.Address
        DB_PORT: !GetAtt DatabaseRDS.Endpoint.Port
        DATABASE: !Ref RDSDatabaseName
        STRIPE_SECRET_ARN: !Ref StripeSecretsManagerARN
    LoggingConfig:
      LogFormat: JSON
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo

Resources:
  ImageHostingS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "synqsell-image-hosting"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    Metadata:
      Description: "Public S3 bucket for hosting publicly accessible images such logos for SynqSell"

  ImageHostingS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageHostingS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${ImageHostingS3}/*

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [0, !Cidr [!GetAtt MyVPC.CidrBlock, 3, 8]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt MyVPC.CidrBlock, 3, 8]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      MapPublicIpOnLaunch: True
      CidrBlock: !Select [2, !Cidr [!GetAtt MyVPC.CidrBlock, 3, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [3, !Cidr [!GetAtt MyVPC.CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]

  # https://aws.amazon.com/blogs/security/how-to-securely-provide-database-credentials-to-lambda-functions-by-using-aws-secrets-manager/#:~:text=Dynamic%20references%20provide%20a%20compact%2C%20powerful%20way%20for,the%20resolved%20value%2C%20keeping%20the%20database%20password%20safe.
  DatabaseRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: RDS database credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "${!Ref RDSDatabaseUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '$'';|&<>()[]{}!?*%^~`,:#/\"@/\\ "'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  DatabaseSubnets:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo

  DatabaseRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref RDSDatabaseName
      Engine: "postgres"
      MasterUsername: !Ref RDSDatabaseUsername
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DatabaseRotationSecret}:SecretString:password}}"
      Port: "5432"
      DBInstanceClass: "db.t3.micro"
      AllocatedStorage: "20"
      PubliclyAccessible: false
      BackupRetentionPeriod: 7
      MultiAZ: false
      DBSubnetGroupName: !Ref DatabaseSubnets
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for database access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      VpcId: !Ref MyVPC

  # Need a Bastion host in public subnet
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host (local db access)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyCidrIP
      VpcId: !Ref MyVPC

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-037774efca2da0726
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref BastionHostSecurityGroup
          SubnetId: !Ref PublicSubnetOne
      KeyName: !Ref BastionHostKeyName

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref MyVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: Name
          Value: NATGateway

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateSubnetOneTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetOne
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetTwoTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetTwo
      RouteTableId: !Ref PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Start API Gateway
  # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html
  # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
  # TODO: Check if there are any globals we can set for API Gateway to make it less verbose
  APIGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayCloudWatchRole.Arn

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: APIGateway

  DeliveryCarrierServiceApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      RestApiId: !Ref APIGateway
      PathPart: deliveryCarrierService

  DeliveryCarrierServiceCallback:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref DeliveryCarrierServiceApiResource
      RestApiId: !Ref APIGateway
      PathPart: callback

  DeliveryCarrierServiceApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref DeliveryCarrierServiceCallback
      RestApiId: !Ref APIGateway
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeliveryCarrierServiceFunction.Arn}/invocations

  DeliveryCarrierServicePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeliveryCarrierServiceFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/${HttpMethod}/${ResourcePath}
        - ApiId: !Ref APIGateway
          HttpMethod: POST
          ResourcePath: !Join ["/", ["deliveryCarrierService", "callback"]]

  DeliveryCarrierServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: delivery_carrier_service
      CodeUri: shopify/api/deliveryCarrierService/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  # For the Stripe Public Endpoint
  # Stripe EventBridge is in closed beta, the only way to handle right now is by creating a public endpoint
  StripeServiceApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      RestApiId: !Ref APIGateway
      PathPart: stripe

  StripeWebhooksApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref StripeServiceApiResource
      RestApiId: !Ref APIGateway
      PathPart: webhooks

  StripeWebhookCoordinatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: stripe_webhook_coordinator
      CodeUri: stripe/webhooks/webhooksCoordinator/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "secretsmanager:GetSecretValue"
              Resource: !Ref StripeSecretsManagerARN
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource: "*"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  StripeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StripeWebhookCoordinatorFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/${HttpMethod}/${ResourcePath}
        - ApiId: !Ref APIGateway
          HttpMethod: POST
          ResourcePath: !Join ["/", ["stripe", "webhooks"]]

  StripeApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref StripeWebhooksApiResource
      RestApiId: !Ref APIGateway
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StripeWebhookCoordinatorFunction.Arn}/invocations

  # https://medium.com/@lancers/deployment-in-amazon-api-gateway-128c522c762e
  # There should be other ways to handle this issue, but deployments are deployed snapshots so unless you delete / recreate the resource, it will not redeploy...
  # For now, follow the solution in the medium article above, but either switch to v2 with AutoDeploy property or decide how to do it later
  APIGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref APIGatewayDeployment20241018
      RestApiId: !Ref APIGateway
      StageName: dev

  APIGatewayDeployment20241018:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateway
    DependsOn:
      - DeliveryCarrierServiceApiMethod
      - StripeApiMethod

  # End of API Gateway Deployment

  # https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html
  # for queue to ensure retry mechanism for webhook delivery
  WebhookSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "webhook_queue.fifo"
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WebhookDLQ.Arn
        maxReceiveCount: 3

  ShopifyWebhookRule:
    Type: AWS::Events::Rule
    Properties:
      Name: sqs_rule
      EventPattern:
        detail-type:
          - "shopifyWebhook"
        detail:
          metadata:
            X-Shopify-Topic:
              - prefix: ""
      EventBusName: !Ref EventBusArn
      Targets:
        - Arn: !GetAtt WebhookSQS.Arn
          Id: "WebhookSQSTarget"
          SqsParameters:
            MessageGroupId: "ShopifyWebhookMessages"

  EventBridgeSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref WebhookSQS
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - "SQS:SendMessage"
            Resource: !GetAtt WebhookSQS.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ShopifyWebhookRule.Arn

  WebhookDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "webhook_dead_letter_queue.fifo"
      FifoQueue: true
      ContentBasedDeduplication: true

  # Coordinator Lambda Function that invokes lambda functions for handling shopify webhook topics
  CoordinatorFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt WebhookSQS.Arn
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"

  CoordinatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webhooks_coordinator
      CodeUri: shopify/webhooks/webhooksCoordinator/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Role: !GetAtt CoordinatorFunctionExecutionRole.Arn
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  SQSQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt WebhookSQS.Arn
      FunctionName: !Ref CoordinatorFunction
      Enabled: true

  # Start Lambda Functions For Handling Shopify Webhooks
  DeleteProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: products_delete
      CodeUri: shopify/webhooks/deleteProducts/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  ProductsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: products_update
      CodeUri: shopify/webhooks/productsUpdate/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  FulfillmentOrderRoutingCompleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: order_routing_complete
      CodeUri: shopify/webhooks/fulfillmentOrdersOrderRoutingComplete/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  # fulfillments/create webhook
  FulfillmentsCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fulfillments_create
      CodeUri: shopify/webhooks/fulfillmentsCreate/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  OrdersCancelledFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: orders_cancelled
      CodeUri: shopify/webhooks/ordersCancelled/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  FulfillmentsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fulfillments_update
      CodeUri: shopify/webhooks/fulfillmentsUpdate/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "secretsmanager:GetSecretValue"
              Resource: !Ref StripeSecretsManagerARN
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  AppUninstalledFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: app_uninstalled
      CodeUri: shopify/webhooks/appUninstalled/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  ShopRedactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: shop_redact
      CodeUri: shopify/webhooks/shopRedact/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  # mandatory GDPR compliance webhooks
  CustomersDataRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: customers_data_request
      CodeUri: shopify/webhooks/customersDataRequest/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  CustomersRedactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: customers_redact
      CodeUri: shopify/webhooks/customersRedact/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  # Stripe webhook topics
  StripeAccountApplicationDeauthorizedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: stripe_connect_account_application_deauthorized
      CodeUri: stripe/webhooks/accountApplicationDeauthorized/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

Outputs:
  s3Bucket:
    Description: S3 bucket name for storing all the merchants' logos
    Value: !Ref ImageHostingS3
  awsRegion:
    Description: AWS Region of Deployed Resources
    Value: !Ref AWS::Region
  dbEndpointAddress:
    Description: The connection endpoint for the database
    Value: !GetAtt DatabaseRDS.Endpoint.Address
  bastionHostPublicIP:
    Description: Public IP of your bastion host
    Value: !GetAtt BastionHost.PublicIp
  dbSecretsARN:
    Description: The ARN of the Secrets Manager storing the database rotation secret
    Value: !Ref DatabaseRotationSecret
  deliveryServiceCallbackUrl:
    Description: The public callback endpoint for calculating shipping rates on Shopify
    Value: !Sub
      - https://${ApiID}.execute-api.${AWS::Region}.amazonaws.com/dev/deliveryCarrierService/callback
      - ApiID: !Ref APIGateway
  stripeWebhookUrl:
    Description: The public endpoint for coordinating all stripe webhooks
    Value: !Sub
      - https://${ApiID}.execute-api.${AWS::Region}.amazonaws.com/dev/stripe/webhooks
      - ApiID: !Ref APIGateway
