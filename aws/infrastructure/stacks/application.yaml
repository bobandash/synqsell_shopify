AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Application-related resources (S3, ALB, Remix App, etc.)

Parameters:
  Environment:
    Type: String
  VpcId:
    Type: String
  PrivateSubnetOne:
    Type: String
  PrivateSubnets:
    Type: String
  PublicSubnets:
    Type: String
  AlbSecurityGroup:
    Type: String
  EcsServiceSecurityGroup:
    Type: String
  AppHostedZoneId:
    Type: String
  AppDomainName:
    Type: String
  DatabaseUserCredentialSecret:
    Type: String
  DatabaseConnectionSecret:
    Type: String
  ApiId:
    Type: String
  SecretsAccessPolicy:
    Type: String
  IsInitialDeploy:
    Type: String
    AllowedValues:
      - "True"
      - "False"
Conditions:
  isProd: !Equals
    - !Ref Environment
    - prod
  isStaging: !Equals
    - !Ref Environment
    - staging
  isProdOrStaging: !Or
    - !Condition isProd
    - !Condition isStaging
  isInitialDeployCondition: !Equals
    - !Ref IsInitialDeploy
    - "True"

Resources:
  # TODO: add clean up bucket for dev and staging --> delete
  ImageHostingS3:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    Metadata:
      Description: "Public S3 bucket for hosting publicly accessible images such logos for SynqSell"

  ImageHostingS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageHostingS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${ImageHostingS3}/*

  # Related to web/app browser
  # Flow is Internet => ALB Listener => Target Group => EC2 Instances
  # Note: we only need an ALB and EC2 for staging and prod
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: isProdOrStaging
    Properties:
      Name: !Sub "${Environment}-alb"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: !Split [",", !Ref PublicSubnets]
      SecurityGroups:
        - !Ref AlbSecurityGroup
      IpAddressType: "ipv4"

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: isProdOrStaging
    Properties:
      HostedZoneId: !Ref AppHostedZoneId
      Name: !Ref AppDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: true

  ALBCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: isProdOrStaging
    Properties:
      ValidationMethod: DNS
      DomainName: !Ref AppDomainName

  # listener basically listens to requests and passes it securely to load balancer
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: isProdOrStaging
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: isProdOrStaging
    Properties:
      Certificates:
        - CertificateArn: !Ref ALBCertificate
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroupOne
          Type: "forward"

  # Fargate target = ip
  TargetGroupOne:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: isProdOrStaging
    Properties:
      TargetType: ip
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /health

  # TODO: for simplicity, set image tag to mutable
  # Prod should have versioning for image tags to allow for rollbacks in application in future
  Ecr:
    Type: AWS::ECR::Repository
    Condition: isProdOrStaging
    Properties:
      EmptyOnDelete: True
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE

  EcsCluster:
    Type: "AWS::ECS::Cluster"
    Condition: isProdOrStaging
    Properties:
      CapacityProviders:
        - FARGATE

  # https://www.ernestchiang.com/en/posts/2021/using-amazon-ecs-exec/
  EcsAllowExecuteCommandPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: isProdOrStaging
    Properties:
      Description: "Policy for granting ECS access to use ECS Exec feature (for seeding db)"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ssmmessages:CreateControlChannel"
              - "ssmmessages:CreateDataChannel"
              - "ssmmessages:OpenControlChannel"
              - "ssmmessages:OpenDataChannel"
            Resource:
              - "*"

  # need access to pull container image from ecr and send container logs
  # TODO: look into Task Roles (https://towardsthecloud.com/amazon-ecs-task-role-vs-execution-role); may not need to pass AWS Creds in .env
  EcsExecutionRole:
    Type: "AWS::IAM::Role"
    Condition: isProdOrStaging
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !Ref SecretsAccessPolicy

  # TODO: look into task role, if I specify task role, I shouldn't need to specify the AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY
  EcsTaskRole:
    Type: "AWS::IAM::Role"
    Condition: isProdOrStaging
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref EcsAllowExecuteCommandPolicy

  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/${AWS::StackName}"
      RetentionInDays: 14

  ParameterNodeEnv:
    Condition: isProdOrStaging
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Name: !Sub /${Environment}/env/NODE_ENV
      Type: String
      Value: !If [isProd, production, test]

  # When using services, by specifying a health check
  # if the container is unhealthy, then it will be replaced by a healthy container in the service
  EcsTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: isProdOrStaging
    Properties:
      ContainerDefinitions:
        - Name: synqsell-app
          Image: !Join [":", [!GetAtt Ecr.RepositoryUri, "latest"]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: synqsell
          PortMappings:
            - ContainerPort: 3000
          Command:
            - npm
            - run
            - docker-start
          WorkingDirectory: /app
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/health || exit 1
          Environment:
            - Name: NODE_ENV
              Value: !GetAtt ParameterNodeEnv.Value
            - Name: S3_BUCKET
              Value: !Ref ImageHostingS3
            - Name: CARRIER_SERVICE_CALLBACK_URL
              Value: !Sub https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/stripe/webhooks
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: SHOPIFY_APP_URL
              Value: !Sub https://${AppDomainName}
            - Name: PORT
              Value: 3000
          Secrets:
            - Name: DATABASE
              ValueFrom: !Sub "${DatabaseConnectionSecret}:database::"
            - Name: DB_HOST
              ValueFrom: !Sub "${DatabaseConnectionSecret}:host::"
            - Name: DB_PORT
              ValueFrom: !Sub "${DatabaseConnectionSecret}:port::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${DatabaseUserCredentialSecret}:password::"
            - Name: DB_USERNAME
              ValueFrom: !Sub "${DatabaseUserCredentialSecret}:username::"
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/env/AWS_ACCESS_KEY_ID
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/env/AWS_SECRET_ACCESS_KEY
            - Name: STRIPE_SECRET_API_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/env/STRIPE_SECRET_API_KEY
            - Name: REACT_APP_STRIPE_PUBLISHABLE_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/env/REACT_APP_STRIPE_PUBLISHABLE_KEY
            - Name: SCOPES
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/env/SCOPES
            - Name: SHOPIFY_API_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/env/SHOPIFY_API_KEY
            - Name: SHOPIFY_API_SECRET
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/env/SHOPIFY_API_SECRET
      Cpu: 512
      ExecutionRoleArn: !GetAtt EcsExecutionRole.Arn # what ecs can do
      TaskRoleArn: !GetAtt EcsTaskRole.Arn # what container can do
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Family: !Sub ${AWS::StackName}-task # puts all revisions of task def together

  # service will fail unless alb is created first because it will not route properly to target gorup
  EcsService:
    Type: "AWS::ECS::Service"
    Condition: isProdOrStaging
    DependsOn:
      - ApplicationLoadBalancer
      - HTTPSListener
    Properties:
      LaunchType: FARGATE
      Cluster: !GetAtt EcsCluster.Arn
      DesiredCount: !If
        - isInitialDeployCondition
        - 0
        - 1
      HealthCheckGracePeriodSeconds: 120
      TaskDefinition: !Ref EcsTaskDefinition
      EnableExecuteCommand: true
      LoadBalancers:
        - ContainerName: synqsell-app
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroupOne
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PrivateSubnetOne] # TODO: should be all private subnets when double route table is set up
          SecurityGroups:
            - !Ref EcsServiceSecurityGroup

Outputs:
  ImageHostingS3BucketName:
    Value: !Ref ImageHostingS3
  AlbDNSName:
    Condition: isProdOrStaging
    Value: !GetAtt ApplicationLoadBalancer.DNSName
