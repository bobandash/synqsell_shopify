AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Contains Lambda functions (shopify webhooks, stripe webhooks)

# TODO: For CD pipeline, need to make sure to only retain lambda logs for 14 days instead of the never expire
# TODO: Add a way to automatically poll and receive the failed webhook / create support ticket
# TODO: Change to POLP by only being able to invoke shopify or only being able to invoke stripe
# TODO: Add DLQ to all lambda functions that handle webhook topics

Parameters:
  Environment:
    Type: String
  ApiKeySecret:
    Type: String
  AppConfigSecret:
    Type: String
  VpcId:
    Type: String
  PrivateSubnets:
    Type: String
  DatabaseUserCredentialSecret:
    Type: String
  DatabaseConnectionSecret:
    Type: String
  LambdaSecurityGroup:
    Type: String
  SecretsAccessPolicy:
    Type: String

Conditions:
  isProd: !Equals
    - !Ref Environment
    - prod

Globals:
  Function:
    Timeout: 3
    Layers:
      - !Ref UtilLayer
    Environment:
      Variables:
        DB_USER_CREDENTIALS_SECRET_ID: !Ref DatabaseUserCredentialSecret
        DB_CONNECTION_SECRET_ID: !Ref DatabaseConnectionSecret
        API_KEYS_SECRET_ID: !Ref ApiKeySecret
        NODE_ENV: !Ref Environment
    LoggingConfig:
      LogFormat: JSON
      ApplicationLogLevel: !If [isProd, WARN, TRACE]
      SystemLogLevel: !If [isProd, WARN, DEBUG]
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds: !If
        - isProd
        - !Split [",", !Ref PrivateSubnets]
        - !Split [",", !Select [0, !Split [",", !Ref PrivateSubnets]]]

Resources:
  # IAM Roles for Lambda functions
  LambdaInvokePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy for invoking Lambda functions"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource: "*"

  PrivateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref SecretsAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: SqsDlqSendMessage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: "*"

  StripeCoordinatorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaInvokePolicy
        - !Ref SecretsAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  ShopifyCoordinatorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt WebhookSQS.Arn
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"

  # https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html
  # SNS Topic to send notification that webhooks failed into queue
  EmailSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}_shopify_webhook_failure
      Subscription:
        - Endpoint: "brucehsu1126@gmail.com"
          Protocol: "email"

  # instead of creating multiple alarms,
  # I decided to consolidate single alarm and just filter logs by log insights if I encounter an issue w/ webhook processing
  # we do not need to create it for the compliance because there's no way it'll fail (no async operations)
  ShopifyWebhooksDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}_shopify_dlq
      AlarmDescription: "Alarm when shopify webhook topic throws error and enters DLQ"
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref EmailSNSTopic
      Dimensions:
        - Name: QueueName
          Value: !GetAtt WebhookDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt ShopifyCoordinatorDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt DeleteProductsDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt ProductsUpdateDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt FulfillmentOrderRoutingCompleteDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt OrdersCancelledDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt FulfillmentsUpdateDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt AppUninstalledDLQ.QueueName
        - Name: QueueName
          Value: !GetAtt ShopRedactDLQ.QueueName

  # Queue for shopify webhooks
  WebhookSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join ["_", [!Ref Environment, "webhook_queue.fifo"]]
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WebhookDLQ.Arn
        maxReceiveCount: 3

  ShopifyWebhookRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ["_", [!Ref Environment, shopify_sqs_rule]]
      EventPattern:
        detail-type:
          - "shopifyWebhook"
        detail:
          metadata:
            X-Shopify-Topic:
              - prefix: ""
      EventBusName: !Sub
        - "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${identifier}"
        - identifier: !Sub "{{resolve:secretsmanager:${AppConfigSecret}:SecretString:shopifyEventBusIdentifier}}"

      Targets:
        - Arn: !GetAtt WebhookSQS.Arn
          Id: "WebhookSQSTarget"
          SqsParameters:
            MessageGroupId: "ShopifyWebhookMessages"

  EventBridgeSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref WebhookSQS
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - "SQS:SendMessage"
            Resource: !GetAtt WebhookSQS.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ShopifyWebhookRule.Arn

  WebhookDLQ:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 604800

  SQSQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt WebhookSQS.Arn
      FunctionName: !Ref ShopifyCoordinatorFunction
      Enabled: true

  UtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Layer that contains all util functions shared across lambda functions
      ContentUri: ../../util-layer
      CompatibleRuntimes:
        - nodejs20.x
    Metadata:
      BuildMethod: makefile

  # Shopify Public Endpoints
  DeliveryCarrierServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, delivery_carrier_service]]
      CodeUri: ../../shopify/api/deliveryCarrierService/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts

  # Shopify webhooks
  # Webhook Function DLQs
  # TODO: I'm pretty sure there's like generics in CFN
  ShopifyCoordinatorDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  DeleteProductsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  ProductsUpdateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  FulfillmentOrderRoutingCompleteDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  FulfillmentsCreateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  OrdersCancelledDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  FulfillmentsUpdateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  AppUninstalledDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  ShopRedactDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800

  # Shopify webhook functions
  ShopifyCoordinatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, webhooks_coordinator]]
      CodeUri: ../../shopify/webhooks/webhooksCoordinator/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Role: !GetAtt ShopifyCoordinatorFunctionRole.Arn
      Architectures:
        - x86_64
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ShopifyCoordinatorDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  DeleteProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "products_delete"]]
      CodeUri: ../../shopify/webhooks/deleteProducts/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeleteProductsDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  ProductsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "products_update"]]
      CodeUri: ../../shopify/webhooks/productsUpdate/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ProductsUpdateDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  FulfillmentOrderRoutingCompleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "order_routing_complete"]]
      CodeUri: ../../shopify/webhooks/fulfillmentOrdersOrderRoutingComplete/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FulfillmentOrderRoutingCompleteDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  FulfillmentsCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "fulfillments_create"]]
      CodeUri: ../../shopify/webhooks/fulfillmentsCreate/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FulfillmentsCreateDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  OrdersCancelledFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "orders_cancelled"]]
      CodeUri: ../../shopify/webhooks/ordersCancelled/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  FulfillmentsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "fulfillments_update"]]
      CodeUri: ../../shopify/webhooks/fulfillmentsUpdate/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  AppUninstalledFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "app_uninstalled"]]
      CodeUri: ../../shopify/webhooks/appUninstalled/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  ShopRedactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "shop_redact"]]
      CodeUri: ../../shopify/webhooks/shopRedact/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  # mandatory GDPR compliance webhooks
  CustomersDataRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "customers_data_request"]]
      CodeUri: ../../shopify/webhooks/customersDataRequest/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  CustomersRedactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, "customers_redact"]]
      CodeUri: ../../shopify/webhooks/customersRedact/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  # Stripe webhooks
  StripeWebhookCoordinatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["_", [!Ref Environment, stripe_webhook_coordinator]]
      CodeUri: ../../stripe/webhooks/webhooksCoordinator/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt StripeCoordinatorFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  StripeAccountApplicationDeauthorizedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        !Join [
          "_",
          [!Ref Environment, "stripe_account_application_deauthorized"],
        ]
      CodeUri: ../../stripe/webhooks/accountApplicationDeauthorized/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

  StripePaymentMethodDetached:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        !Join ["_", [!Ref Environment, "stripe_payment_method_detached"]]
      CodeUri: ../../stripe/webhooks/paymentMethodDetached/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt PrivateFunctionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - "/opt/nodejs/*"

Outputs:
  StripeWebhookCoordinatorFunctionArn:
    Value: !GetAtt StripeWebhookCoordinatorFunction.Arn
  DeliveryCarrierServiceFunctionArn:
    Value: !GetAtt DeliveryCarrierServiceFunction.Arn
