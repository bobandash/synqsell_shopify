# Helpful Links
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html

# Common Commands
# sam build
# sam validate --template-file <name> --lint
# sam deploy --config-env dev
# sam deploy --config-env prod

# TODO: Add lambda layers for shared functions
# TODO: Create a CD pipeline to automatically build and push the docker image onto ECR, and pull/run the docker image from ECR to EC2
# TODO: eventually add mapping for different regions and resource types
# TODO: Learn how to create a script that runs sam validate for all the stacks at once
AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31
Description: >
  SAM Template For all infrastructure for SynqSell

Conditions:
  isProd: !Equals
    - !Ref Environment
    - prod

# We do not need staging branch for now, until you have users --> create a private app on shopify for them to test features
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: The environment of the deployment
  AppConfigSecret:
    Type: String
    Description: The secret manager name for the app configuration
  ApiKeySecret:
    Type: String
    Description: The secret manager name for the api keys the application uses

Resources:
  NetworkingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stacks/networking.yaml
      Parameters:
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment

  SecurityStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stacks/security.yaml
      Parameters:
        Environment: !Ref Environment
        AppConfigSecret: !Ref AppConfigSecret
        VpcId: !GetAtt NetworkingStack.Outputs.VpcId
      Tags:
        - Key: Environment
          Value: !Ref Environment

  LambdaFunctionStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stacks/lambda.yaml
      Parameters:
        Environment: !Ref Environment
        ApiKeySecret: !Ref ApiKeySecret
        AppConfigSecret: !Ref AppConfigSecret
        VpcId: !GetAtt NetworkingStack.Outputs.VpcId
        PrivateSubnets: !GetAtt NetworkingStack.Outputs.PrivateSubnets
        DatabaseUserCredentialSecret: !GetAtt DatabaseStack.Outputs.DatabaseUserCredentialSecret
        DatabaseConnectionSecret: !GetAtt DatabaseStack.Outputs.DatabaseConnectionSecret
        LambdaSecurityGroup: !GetAtt SecurityStack.Outputs.LambdaSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ApiStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stacks/api.yaml
      Parameters:
        Environment: !Ref Environment
        StripeWebhookCoordinatorFunctionArn: !GetAtt LambdaFunctionStack.Outputs.StripeWebhookCoordinatorFunctionArn
        DeliveryCarrierServiceFunctionArn: !GetAtt LambdaFunctionStack.Outputs.DeliveryCarrierServiceFunctionArn
      Tags:
        - Key: Environment
          Value: !Ref Environment

  DatabaseStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stacks/database.yaml
      Parameters:
        Environment: !Ref Environment
        AppConfigSecret: !Ref AppConfigSecret
        PrivateSubnets: !GetAtt NetworkingStack.Outputs.PrivateSubnets
        PublicSubnetOne: !GetAtt NetworkingStack.Outputs.PublicSubnetOne
        BastionHostSecurityGroup: !GetAtt SecurityStack.Outputs.BastionHostSecurityGroup
        DatabaseSecurityGroup: !GetAtt SecurityStack.Outputs.DatabaseSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ApplicationStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stacks/application.yaml
      Parameters:
        Environment: !Ref Environment
        AppConfigSecret: !Ref AppConfigSecret
        VpcId: !GetAtt NetworkingStack.Outputs.VpcId
        PrivateSubnetOne: !GetAtt NetworkingStack.Outputs.PrivateSubnetOne
        PublicSubnets: !GetAtt NetworkingStack.Outputs.PublicSubnets
        ALBSecurityGroup:
          !If [
            isProd,
            !GetAtt SecurityStack.Outputs.ALBSecurityGroup,
            AWS::NoValue,
          ]
        RemixAppSecurityGroup:
          !If [
            isProd,
            !GetAtt SecurityStack.Outputs.ALBSecurityGroup,
            AWS::NoValue,
          ]
      Tags:
        - Key: Environment
          Value: !Ref Environment

# These outputs are to create the environment variables
Outputs:
  ImageHostingS3BucketName:
    Description: S3 bucket name for storing all the merchants' logos
    Value: !GetAtt ApplicationStack.Outputs.ImageHostingS3BucketName
  AwsRegion:
    Description: AWS Region of Deployed Resources
    Value: !Ref AWS::Region
  DbUserSecretArn:
    Description: Secrets Manager for Database Admin User Credentials
    Value: !GetAtt DatabaseStack.Outputs.DatabaseUserCredentialSecret
  DbConnectionSecretArn:
    Description: Secrets Manager for Database Connection
    Value: !GetAtt DatabaseStack.Outputs.DatabaseConnectionSecret
  BastionHostPublicIp:
    Description: Public IP of your bastion host
    Value: !GetAtt DatabaseStack.Outputs.BastionHostPublicIp
  DeliveryServiceCallbackUrl:
    Description: The public callback endpoint for calculating shipping rates on Shopify
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/deliveryCarrierService/callback
      - ApiId: !GetAtt ApiStack.Outputs.ApiGatewayId
  StripeWebhookUrl:
    Description: The public endpoint for coordinating all stripe webhooks
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/stripe/webhooks
      - ApiId: !GetAtt ApiStack.Outputs.ApiGatewayId
  AlbDNSName:
    Condition: isProd
    Description: The application url to set SynqSell
    Value: !GetAtt ApplicationStack.Outputs.DNSName
